{"version":3,"sources":["components/shared/SectionHeader.tsx","contents/locationContent.ts","components/location/LocationInput.tsx","components/shared/WarningDisplay.tsx","helpers/decodeLocation.ts","components/location/LocationContainer.tsx","contents/currentWeatherContent.ts","helpers/windDirection.ts","components/current-weather/CurrentWeatherDetails.tsx","components/current-weather/CurrentWeatherContainer.tsx","components/pages/HomePage.tsx"],"names":["SectionHeader","title","titleSpan","className","pl","spinner","message","header","input","label","buttonLabel","buttonText","warning","location","geolocation","en","LocationInput","locationSearch","language","locationInputRef","useRef","content","onSubmit","event","preventDefault","current","value","htmlFor","type","id","ref","aria-label","WarningDisplay","lat","long","axios","post","then","response","data","LocationContainer","useContext","LanguageContext","LocationContext","dispatch","useState","setWarning","geolocationSupported","navigator","useEffect","getCurrentPosition","position","a","coords","latitude","toString","longitude","decodeLocation","payload","Spinner","noLocation","noWeather","weather","rain","snow","feelsLike","pressure","humidity","visibility","wind","clouds","button","moreDetails","lessDetails","windDirection","degs","CurrentWeatherDetails","extendedView","setExtendedView","src","icon","alt","description","toUpperCase","main","temp","toFixed","feels_like","temp_min","temp_max","deg","speed","all","role","aria-checked","onClick","CurrentWeatherContainer","setWeather","catch","e","console","log"],"mappings":"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","file":"static/js/6.5408af13.chunk.js","sourcesContent":["import React from 'react';\nimport { ISectionHeaderProps } from '../../types';\n\nconst SectionHeader: React.FC<ISectionHeaderProps> = ({\n  title,\n  titleSpan\n}) => {\n  return (\n    <h2 className='l-section__header'>\n      {title}:{' '}\n      <span className='l-section__header--bold'>{titleSpan}</span>\n    </h2>\n  );\n};\n\nexport default SectionHeader;\n","export default {\n  pl: {\n    spinner: {\n      message: 'Czekam na lokalizację...'\n    },\n    header: {\n      title: 'lokalizacja'\n    },\n    input: {\n      label: 'wpisz lokalizację: ',\n      buttonLabel: 'Wyszukaj lokalizację',\n      buttonText: 'szukaj'\n    },\n    warning: {\n      location: 'Zezwól na dostęp do usługi lokalizacji lub wpisz lokalizację ręcznie.',\n      geolocation: 'Geolokacja nie jest obsługiwana przez Twoją przeglądarkę. Wpisz lokalizację ręcznie.'\n    }\n  },\n  en: {\n    spinner: {\n      message: 'Waiting for your location...'\n    },\n    header: {\n      title: 'location'\n    },\n    input: {\n      label: 'enter location: ',\n      buttonLabel: 'Search for Location',\n      buttonText: 'search'\n    },\n    warning: {\n      location: 'Please allow access to your location or provide desired location manually.',\n      geolocation: 'Geolocation is not supported by your browser. Please provide desired location manually.'\n    }\n  }\n}","import React, { useRef } from 'react';\nimport content from '../../contents/locationContent';\nimport { ILocationInputProps } from '../../types';\n\nconst LocationInput: React.FC<ILocationInputProps> = ({\n  locationSearch,\n  language\n}) => {\n  const locationInputRef = useRef<HTMLInputElement>(null);\n  const { label, buttonLabel, buttonText } = content[language].input;\n\n  const searchLocation = (event: React.FormEvent) => {\n    event.preventDefault();\n    const location = locationInputRef.current!.value;\n    locationSearch(location);\n  };\n\n  return (\n    <form className='o-form' onSubmit={searchLocation}>\n      <label htmlFor='locationInput'>{label}</label>\n      <input\n        className='o-input'\n        type='text'\n        id='locationInput'\n        ref={locationInputRef}\n      />\n      <button className='o-button' type='submit' aria-label={buttonLabel}>\n        {buttonText}\n      </button>\n    </form>\n  );\n};\n\nexport default LocationInput;\n","import React from 'react';\n\nconst WarningDisplay: React.FC<{ warning: string }> = ({warning}) => (\n  <p >\n    {warning}\n  </p>\n);\n\nexport default WarningDisplay;","import axios from 'axios';\n\nconst API_URL = 'https://wtw-api.herokuapp.com/location';\n\nexport default (lat: string, long: string): Promise<string> => {\n  return axios.post(API_URL, { lat, long }).then(response => {\n    return response.data as string;\n  });\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport { LanguageContext } from '../../providers/LanguageProvider';\nimport { LocationContext } from '../../providers/LocationProvider';\nimport SectionHeader from '../shared/SectionHeader';\nimport LocationInput from './LocationInput';\nimport WarningDisplay from '../shared/WarningDisplay';\nimport Spinner from '../shared/Spinner';\nimport decodeLocation from '../../helpers/decodeLocation';\nimport content from '../../contents/locationContent';\nimport { IGeolocationResponse } from '../../types';\n\nconst LocationContainer: React.FC = () => {\n  const { language } = useContext(LanguageContext);\n  const { location, dispatch } = useContext(LocationContext);\n  const [warning, setWarning] = useState('');\n  const geolocationSupported = navigator && navigator.geolocation;\n\n  useEffect(() => {\n    if (geolocationSupported && !location) {\n      navigator.geolocation.getCurrentPosition(\n        async (position: IGeolocationResponse) => {\n          const lat = position.coords.latitude.toString();\n          const long = position.coords.longitude.toString();\n          const location = (await decodeLocation(lat, long)) as string;\n          dispatch && dispatch({ type: 'SET_LOCATION', payload: location });\n        },\n        () => setWarning(content[language].warning.location)\n      );\n    }\n  });\n\n  useEffect(() => {\n    if (!location && !geolocationSupported) {\n      setWarning(content[language].warning.geolocation);\n    }\n  }, [location, geolocationSupported, language]);\n\n  function handleLocationSearch(location: string) {\n    dispatch && dispatch({ type: 'SET_LOCATION', payload: location });\n  }\n\n  return (\n    <>\n      {location ? (\n        <SectionHeader title={content[language].header.title} titleSpan={location} />\n      ) : (\n        <Spinner message={content[language].spinner.message} />\n      )}\n      {warning && <WarningDisplay warning={warning} />}\n      <LocationInput locationSearch={handleLocationSearch} language={language} />\n    </>\n  );\n};\n\nexport default LocationContainer;\n","export default {\n  pl: {\n    spinner: {\n      message: {\n        noLocation: 'Czekam na lokalizację...',\n        noWeather: 'Sprawdzam pogodę w '\n      }\n    },\n    header: {\n      title: 'aktualna pogoda w'\n    },\n    warning: 'Informacje niedostępne',\n    weather: {\n      rain: 'deszcz',\n      snow: 'śnieg',\n      feelsLike: 'odczuwalne',\n      pressure: 'ciśnienie',\n      humidity: 'wilgotność',\n      visibility: 'widoczność',\n      wind: 'wiatr',\n      clouds: 'zachmurzenie'\n    },\n    button: {\n      label: 'Szczegółowe informacje',\n      moreDetails: 'więcej informacji',\n      lessDetails: 'mniej informacji'\n    }\n  },\n  en: {\n    spinner: {\n      message: {\n        noLocation: 'Waiting for location...',\n        noWeather: 'Checking weather in  '\n      }\n    },\n    header: {\n      title: 'current weather in'\n    },\n    warning: 'Weather not available',\n    weather: {\n      rain: 'rain',\n      snow: 'snow',\n      feelsLike: 'feels like',\n      pressure: 'pressure',\n      humidity: 'humidity',\n      visibility: 'visibility',\n      wind: 'wind',\n      clouds: 'clouds'\n    },\n    button: {\n      label: 'Detailed Informations',\n      moreDetails: 'see more details',\n      lessDetails: 'hide details'\n    }\n  }\n}","const windDirection = (degs: number): string => {\n  if (degs >= 350 && degs < 10) return 'N';\n  if (degs >= 10 && degs < 80) return 'NE';\n  if (degs >= 80 && degs < 100) return 'E';\n  if (degs >= 100 && degs < 170) return 'SE';\n  if (degs >= 180 && degs < 190) return 'S';\n  if (degs >= 190 && degs < 260) return 'SW';\n  if (degs >= 260 && degs < 280) return 'W';\n  return 'NW';\n};\n\nexport default windDirection;\n","import React, { useState } from 'react';\nimport { ICurrentWeatherDetailsProps } from '../../types';\nimport content from '../../contents/currentWeatherContent';\nimport windDirection from '../../helpers/windDirection';\n\nconst CurrentWeatherDetails: React.FC<ICurrentWeatherDetailsProps> = ({\n  weather,\n  language\n}) => {\n  const [extendedView, setExtendedView] = useState<boolean>(false);\n\n  const {\n    feelsLike,\n    rain,\n    snow,\n    pressure,\n    humidity,\n    visibility,\n    wind,\n    clouds\n  } = content[language].weather;\n\n  const { label, moreDetails, lessDetails } = content[language].button;\n\n  return (\n    <div className='c-weather'>\n      <div className='c-weather__icon'>\n        <img\n          src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n          alt=''\n        />\n      </div>\n      <div className='c-weather__details'>\n        <p className='c-weather__description'>\n          {weather.weather[0].description.toUpperCase()}\n        </p>\n        <p className='c-weather__temperature'>\n          {weather.main.temp.toFixed(1)}°C\n        </p>\n\n        {extendedView && (\n          <ul className='c-weather__full'>\n            <li className='c-weather__item'>\n              {feelsLike}: {weather.main.feels_like.toFixed(1)}°C\n            </li>\n            <li className='c-weather__item'>\n              {weather.main.temp_min && (\n                <span>min: {weather.main.temp_min.toFixed(1)}°C</span>\n              )}\n              {weather.main.temp_max && (\n                <span> max: {weather.main.temp_max.toFixed(1)}°C</span>\n              )}\n            </li>\n            {weather.rain && (\n              <li className='c-weather__item'>\n                {rain}: {weather.rain['1h']}mm\n              </li>\n            )}\n            {weather.snow && (\n              <li className='c-weather__item'>\n                {snow}: {weather.snow['1h']}mm\n              </li>\n            )}\n            {weather.main.pressure && (\n              <li className='c-weather__item'>\n                {pressure}: {weather.main.pressure}hPa\n              </li>\n            )}\n            {weather.main.humidity && (\n              <li className='c-weather__item'>\n                {humidity}: {weather.main.humidity}%\n              </li>\n            )}\n            {weather.visibility && (\n              <li className='c-weather__item'>\n                {visibility}: {weather.visibility}m\n              </li>\n            )}\n            {weather.wind && weather.wind.deg && (\n              <li className='c-weather__item'>\n                {wind}: {weather.wind.speed}m/s{' '}\n                {windDirection(weather.wind.deg)}\n              </li>\n            )}\n            {weather.clouds && (\n              <li className='c-weather__item'>\n                {clouds}: {weather.clouds.all}%\n              </li>\n            )}\n          </ul>\n        )}\n\n        <button\n          className='o-button'\n          role='switch'\n          aria-checked={!extendedView}\n          aria-label={label}\n          onClick={() => {\n            setExtendedView(!extendedView);\n          }}\n        >\n          {extendedView ? lessDetails : moreDetails}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CurrentWeatherDetails;\n","import React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { LanguageContext } from '../../providers/LanguageProvider';\nimport { LocationContext } from '../../providers/LocationProvider';\nimport Spinner from '../shared/Spinner';\nimport SectionHeader from '../shared/SectionHeader';\nimport WarningDisplay from '../shared/WarningDisplay';\nimport CurrentWeatherDetails from './CurrentWeatherDetails';\nimport content from '../../contents/currentWeatherContent';\nimport { ICurrentWeatherResponse } from '../../types';\n\nconst API_URL = 'https://wtw-api.herokuapp.com/weather/current';\n\nconst CurrentWeatherContainer: React.FC = () => {\n  const [weather, setWeather] = useState<ICurrentWeatherResponse>();\n  const [warning, setWarning] = useState('');\n  const { language } = useContext(LanguageContext);\n  const { location } = useContext(LocationContext);\n\n  useEffect(() => {\n    if (location) {\n      axios\n        .post(API_URL, { location, language })\n        .then(response => response.data)\n        .then((data: ICurrentWeatherResponse) => {\n          setWeather(data);\n        })\n        .catch(e => {\n          console.log(e);\n          setWarning(content[language].warning);\n        });\n    }\n  }, [location, language]);\n\n  return (\n    <>\n      <SectionHeader\n        title={content[language].header.title}\n        titleSpan={location}\n      />\n      {warning ? (\n        <WarningDisplay warning={warning} />\n      ) : (\n        <>\n          {!location && (\n            <Spinner message={content[language].spinner.message.noLocation} />\n          )}\n          {location && !weather && (\n            <Spinner\n              message={`${content[language].spinner.message.noWeather} ${location}`}\n            />\n          )}\n          {location && weather && (\n            <CurrentWeatherDetails weather={weather} language={language} />\n          )}{' '}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default CurrentWeatherContainer;\n","import React from 'react';\n\nimport LocationContainer from '../location/LocationContainer';\nimport CurrentWeatherContainer from '../current-weather/CurrentWeatherContainer';\n\nexport default () => {\n  return (\n    <div className=\"l-page\">\n      <section className=\"l-section\">\n        <LocationContainer />\n      </section>\n      <section className=\"l-section\">\n        <CurrentWeatherContainer />\n      </section>\n    </ div>\n  );\n};\n"],"sourceRoot":""}