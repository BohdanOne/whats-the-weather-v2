{"version":3,"sources":["components/shared/Spinner.tsx","reducers/locationReducer.tsx","providers/LocationProvider.tsx","types/index.ts","reducers/modeReducer.ts","providers/ModeProvider.tsx","contents/headerContent.ts","components/header/settings-panel/LanguageSwitch.tsx","components/header/settings-panel/ModeSwitch.tsx","components/header/settings-panel/SettingsList.tsx","components/header/nav-buttons/NavButton.tsx","components/header/nav-buttons/SettingsIcon.tsx","components/header/nav-buttons/CloseIcon.tsx","components/header/settings-panel/SettingsPanel.tsx","components/header/HeaderIcon.tsx","components/header/main-nav/NavItem.tsx","components/header/main-nav/NavList.tsx","components/header/nav-buttons/NavIcon.tsx","components/header/main-nav/Main-Nav.tsx","components/header/MainHeader.tsx","components/pages/Pages.tsx","components/layout/Main.tsx","components/layout/Layout.tsx","components/App.tsx","serviceWorker.ts","index.tsx","reducers/languageReducer.ts","providers/LanguageProvider.tsx"],"names":["props","className","message","initialState","location","dispatch","locationReducer","state","action","type","payload","LocationContext","React","createContext","LocationProvider","children","useReducer","dispatchLocation","Provider","value","Languages","Modes","mode","LIGHT","light","DARK","dark","DEFAULT_MODE","window","matchMedia","matches","ModeContext","changeMode","ModeProvider","modeReducer","pl","button","close","settings","nav","path","forecasts","about","switch","language","en","LanguageSwitch","useContext","LanguageContext","changeLanguage","content","htmlFor","role","aria-label","name","id","checked","onChange","updateUI","rootStyle","document","documentElement","style","setProperty","ModeSwitch","toggleMode","defaultChecked","SettingsList","NavButton","handleClick","label","onClick","SettingsIcon","viewBox","xmlns","d","CloseIcon","SettingsPanel","useState","isExpanded","setIsExpanded","HeaderIcon","NavItem","textContent","isActive","useLocation","pathname","slice","to","toUpperCase","NavList","NavIcon","Nav","MainHeader","HomePage","lazy","ForecastsPage","AboutPage","Pages","fallback","Spinner","exact","component","Main","Layout","App","LanguageProvider","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","DEFAULT_LANGUAGE","languageReducer","querySelector","setAttribute"],"mappings":"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","file":"static/js/main.b736ba37.chunk.js","sourcesContent":["import React from 'react';\n\nexport default (props: { message: string }) => {\n  return (\n    <div className=\"o-spinner\">\n      <p className=\"o-spinner__message\">{props.message}</p>\n      <div className=\"o-spinner__spinner\"></div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ILocationState, ILocationAction, TSetLocation } from '../types';\n\nconst SET_LOCATION: TSetLocation = 'SET_LOCATION';\nexport const initialState: ILocationState = {\n  location: '',\n  dispatch: null\n}\n\nexport const locationReducer: React.Reducer<ILocationState, ILocationAction> = (state, action) => {\n  switch (action.type) {\n    case SET_LOCATION:\n      return { ...state, location: action.payload };\n    default:\n      return state;\n  }\n};","import React, { useReducer } from 'react';\nimport { locationReducer, initialState } from '../reducers/locationReducer';\nimport { ILocationState, ILocationAction, ILocationContext } from '../types';\n\nexport const LocationContext = React.createContext<ILocationContext>({\n  location: '',\n  dispatch: null\n});\n\nexport const LocationProvider: React.FC<{ children: React.ReactElement }> = ({\n  children\n}) => {\n  const [location, dispatchLocation] = useReducer<\n    React.Reducer<ILocationState, ILocationAction>\n  >(locationReducer, initialState);\n\n  return (\n    <LocationContext.Provider\n      value={{ location: location.location, dispatch: dispatchLocation }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};\n","import { ReactElement } from 'react';\n\n/* Types for reducers\n******************************************************************************/\nexport enum Languages {\n  en = 'en',\n  pl = 'pl'\n}\n\nexport enum Modes {\n  light = 'light',\n  dark = 'dark'\n}\n\nexport interface ILocationState {\n  location: string;\n  dispatch: React.Dispatch<ILocationAction> | null;\n}\n\nexport interface ILocationAction {\n  type: TSetLocation;\n  payload: string;\n}\n\nexport interface IModeState {\n  mode: Modes;\n  dispatch: React.Dispatch<IModeAction> | null;\n}\n\nexport interface IModeAction {\n  type: TChangeMode;\n  payload: Modes;\n}\n\n// Action types\nexport type TChangeLanguage = 'CHANGE_LANGUAGE';\n\nexport type TChangeMode = 'CHANGE_MODE';\n\nexport type TSetLocation = 'SET_LOCATION';\n\n\n/* Types for providers\n******************************************************************************/\nexport interface ILanguageContext {\n  language: Languages;\n  changeLanguage?: React.Dispatch<{type: TChangeLanguage; payload: Languages}>\n}\n\nexport interface IModeContext {\n  mode: Modes;\n  changeMode: React.Dispatch<{type: TChangeMode; payload: Modes}> | null\n}\n\nexport interface ILocationContext {\n  location: string;\n  dispatch: React.Dispatch<ILocationAction> | null;\n}\n\n\n/* Types for api responses\n******************************************************************************/\nexport interface IGeolocationResponse {\n  coords: {\n    latitude: number;\n    longitude: number;\n  };\n}\n\nexport interface ICurrentWeatherResponse {\n  name: string;\n  weather: {\n    main: string;\n    description: string;\n    icon: string;\n  }[];\n  main: {\n    temp: number;\n    feels_like: number;\n    temp_min?: number;\n    temp_max?: number;\n    pressure: number; // hPa\n    humidity: number; // %\n  };\n  visibility?: number;\n  wind?: {\n    speed?: number; // m/s\n    deg?: number;\n  };\n  clouds?: { all?: number }; // %\n  rain?: { '1h'?: number }; // mm\n  snow?: { '1h'?: number }; // mm\n};\n\n\n/* Types for nav components\n******************************************************************************/\nexport interface INavClickable {\n  handleClick: () => void;\n}\n\nexport interface INavWithLanguage extends INavClickable {\n  language: Languages;\n}\n\nexport interface INavButton extends INavClickable {\n  label: string;\n  children: ReactElement;\n}\n\n\n/* Types for main components props\n******************************************************************************/\nexport interface ICurrentWeatherDetailsProps {\n  weather: ICurrentWeatherResponse;\n  language: Languages;\n}\n\nexport interface ISectionHeaderProps {\n  title: string;\n  titleSpan?: string;\n}\n\nexport interface ILocationInputProps {\n  locationSearch: (location: string) => void;\n  language: Languages;\n}","import { Modes, TChangeMode } from '../types';\n\nconst CHANGE_MODE: TChangeMode = 'CHANGE_MODE';\n\nexport default (\n  mode: Modes,\n  action: { type: TChangeMode; payload: Modes }\n): Modes => {\n  switch (action.type) {\n    case CHANGE_MODE:\n      return (mode = action.payload);\n    default:\n      return mode;\n  }\n};\n","import React, { useReducer } from 'react';\nimport modeReducer from '../reducers/modeReducer';\nimport { Modes, IModeContext } from '../types';\n\nconst LIGHT = Modes.light;\nconst DARK = Modes.dark;\n\nconst isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\nconst DEFAULT_MODE: Modes = isDark ? DARK : LIGHT;\n\nexport const ModeContext = React.createContext<IModeContext>({mode: DEFAULT_MODE, changeMode: null});\n\nexport const ModeProvider: React.FC<{children: React.ReactElement}> = ({ children }) => {\n  const [mode, changeMode] = useReducer(modeReducer, DEFAULT_MODE)\n\n  return (\n    <ModeContext.Provider value={ {mode, changeMode} }>\n      {children}\n    </ModeContext.Provider>\n  );\n};\n","export default {\n  pl: {\n    button: {\n      close: 'Zamknij Nawigację',\n      settings: 'Otwórz ustawienia',\n      nav: 'Otwórz nawigację'\n    },\n    path: {\n      forecasts: 'prognozy',\n      about: 'info'\n    },\n    switch: {\n      language: 'zmień język',\n      mode: 'zmień tryb',\n      light: 'tryb jasny',\n      dark: 'tryb ciemny'\n    }\n  },\n  en: {\n    button: {\n      close: 'Close Navigation',\n      settings: 'Open Settings',\n      nav: 'Open Navigation'\n    },\n    path: {\n      forecasts: 'forecasts',\n      about: 'about'\n    },\n    switch: {\n      language: 'change language',\n      mode: 'change mode',\n      light: 'light mode',\n      dark: 'dark mode'\n    }\n  }\n}","import React, { useContext } from 'react';\nimport { LanguageContext } from '../../../providers/LanguageProvider';\nimport { Languages, TChangeLanguage } from '../../../types';\nimport content from '../../../contents/headerContent';\n\nconst CHANGE_LANGUAGE: TChangeLanguage = 'CHANGE_LANGUAGE'\n\nconst LanguageSwitch: React.FC = () => {\n  const { language, changeLanguage } = useContext(LanguageContext);\n\n  return (\n    <div className='c-nav__item'>\n      <p>{content[language].switch.language}</p>\n      <label htmlFor='en'>\n        <span role='img' aria-label='English'>\n          {' '}\n          🇬🇧{' '}\n        </span>\n      </label>\n      <input\n        type='radio'\n        name='language'\n        id='en'\n        value='en'\n        checked={language === Languages.en}\n        onChange={() => {\n          changeLanguage!({ type: CHANGE_LANGUAGE, payload: Languages.en });\n        }}\n      />\n      <label htmlFor='pl'>\n        <span role='img' aria-label='Język polski'>\n          {' '}\n          🇵🇱{' '}\n        </span>\n      </label>\n      <input\n        type='radio'\n        name='language'\n        id='pl'\n        value='pl'\n        checked={language === Languages.pl}\n        onChange={() => {\n          changeLanguage!({ type: CHANGE_LANGUAGE, payload: Languages.pl });\n        }}\n      />\n    </div>\n  );\n};\n\nexport default LanguageSwitch;\n","import React, { useContext } from 'react';\nimport { LanguageContext } from '../../../providers/LanguageProvider';\nimport { ModeContext } from '../../../providers/ModeProvider';\nimport content from '../../../contents/headerContent';\nimport { Modes, TChangeMode } from '../../../types';\n\nconst CHANGE_MODE: TChangeMode = 'CHANGE_MODE';\n\nconst ModeSwitch: React.FC = () => {\n  const { language } = useContext(LanguageContext);\n  const { mode, changeMode } = useContext(ModeContext);\n\n  const toggleMode = (mode: Modes) => {\n    changeMode && changeMode({ type: CHANGE_MODE, payload: mode });\n    updateUI(mode);\n  };\n\n  return (\n    <div className='c-nav__item'>\n      <p>{content[language].switch.mode}</p>\n      <label htmlFor='light'>\n        <span role='img' aria-label={content[language].switch.light}>\n          {' '}\n          ☼{' '}\n        </span>\n      </label>\n      <input\n        type='radio'\n        name='mode'\n        id='light'\n        value='light'\n        defaultChecked={mode === Modes.light}\n        onChange={() => toggleMode(Modes.light)}\n      />\n      <label htmlFor='dark'>\n        <span role='img' aria-label={content[language].switch.dark}>\n          {' '}\n          ☾{' '}\n        </span>\n      </label>\n      <input\n        type='radio'\n        name='mode'\n        id='dark'\n        value='dark'\n        defaultChecked={mode === Modes.dark}\n        onChange={() => toggleMode(Modes.dark)}\n      />\n    </div>\n  );\n};\n\nconst updateUI = (mode: Modes) => {\n  const rootStyle = document.documentElement.style;\n  if (mode === Modes.light) {\n    rootStyle.setProperty('--color-main', '#48484a');\n    rootStyle.setProperty('--color-main-light', 'rgba(72, 72, 74, 0.5)');\n    rootStyle.setProperty('--color-opposite', '#f2f2f1');\n  } else {\n    rootStyle.setProperty('--color-main', '#f2f2f1');\n    rootStyle.setProperty('--color-main-light', 'rgba(242, 242, 241, 0.5)');\n    rootStyle.setProperty('--color-opposite', '#48484a');\n  }\n};\n\nexport default ModeSwitch;\n","import React from 'react';\nimport LanguageSwitch from './LanguageSwitch';\nimport ModeSwitch from './ModeSwitch';\n\nconst SettingsList: React.FC = () => {\n  return (\n    <nav className='c-nav__list c-nav__list--settings'>\n      <LanguageSwitch />\n      <ModeSwitch />\n    </nav>\n  );\n};\n\nexport default SettingsList;\n","import React from 'react';\nimport { INavButton } from '../../../types'\n\nconst NavButton: React.FC<INavButton> = ({ handleClick, label, children }) => {\n  return (\n    <button\n      className='o-button o-button--nav'\n      onClick={handleClick}\n      aria-label={label}\n    >\n      { children }\n    </button>\n  );\n};\n\nexport default NavButton;\n","import React from 'react';\n\nconst SettingsIcon: React.FC = () => {\n  return (\n    <svg\n      viewBox='0 0 26 26'\n      className='o-button--nav__icon'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <path d='M9.84375 0L9.6875 0.8125L9.09375 3.78125C8.14062 4.15625 7.28125 4.68359 6.5 5.3125L3.59375 4.3125L2.8125 4.0625L2.40625 4.78125L0.40625 8.21875L0 8.9375L0.59375 9.46875L2.84375 11.4375C2.76172 11.9492 2.65625 12.4609 2.65625 13C2.65625 13.5391 2.76172 14.0508 2.84375 14.5625L0.59375 16.5312L0 17.0625L0.40625 17.7812L2.40625 21.2188L2.8125 21.9375L3.59375 21.6875L6.5 20.6875C7.28125 21.3164 8.14062 21.8438 9.09375 22.2188L9.6875 25.1875L9.84375 26H15.4688L15.625 25.1875L16.2188 22.2188C17.1719 21.8438 18.0312 21.3164 18.8125 20.6875L21.7188 21.6875L22.5 21.9375L22.9062 21.2188L24.9062 17.7812L25.3125 17.0625L24.7188 16.5312L22.4688 14.5625C22.5508 14.0508 22.6562 13.5391 22.6562 13C22.6562 12.4609 22.5508 11.9492 22.4688 11.4375L24.7188 9.46875L25.3125 8.9375L24.9062 8.21875L22.9062 4.78125L22.5 4.0625L21.7188 4.3125L18.8125 5.3125C18.0312 4.68359 17.1719 4.15625 16.2188 3.78125L15.625 0.8125L15.4688 0H9.84375ZM11.4688 2H13.8438L14.3438 4.59375L14.4688 5.1875L15.0312 5.375C16.168 5.73047 17.1992 6.33203 18.0625 7.125L18.5 7.53125L19.0625 7.34375L21.5938 6.46875L22.7812 8.5L20.7812 10.2812L20.3125 10.6562L20.4688 11.25C20.5977 11.8203 20.6562 12.4023 20.6562 13C20.6562 13.5977 20.5977 14.1797 20.4688 14.75L20.3438 15.3438L20.7812 15.7188L22.7812 17.5L21.5938 19.5312L19.0625 18.6562L18.5 18.4688L18.0625 18.875C17.1992 19.668 16.168 20.2695 15.0312 20.625L14.4688 20.8125L14.3438 21.4062L13.8438 24H11.4688L10.9688 21.4062L10.8438 20.8125L10.2812 20.625C9.14453 20.2695 8.11328 19.668 7.25 18.875L6.8125 18.4688L6.25 18.6562L3.71875 19.5312L2.53125 17.5L4.53125 15.7188L5 15.3438L4.84375 14.75C4.71484 14.1797 4.65625 13.5977 4.65625 13C4.65625 12.4023 4.71484 11.8203 4.84375 11.25L5 10.6562L4.53125 10.2812L2.53125 8.5L3.71875 6.46875L6.25 7.34375L6.8125 7.53125L7.25 7.125C8.11328 6.33203 9.14453 5.73047 10.2812 5.375L10.8438 5.1875L10.9688 4.59375L11.4688 2ZM12.6562 8C9.90625 8 7.65625 10.25 7.65625 13C7.65625 15.75 9.90625 18 12.6562 18C15.4062 18 17.6562 15.75 17.6562 13C17.6562 10.25 15.4062 8 12.6562 8ZM12.6562 10C14.3242 10 15.6562 11.332 15.6562 13C15.6562 14.668 14.3242 16 12.6562 16C10.9883 16 9.65625 14.668 9.65625 13C9.65625 11.332 10.9883 10 12.6562 10Z' />\n    </svg>\n  );\n};\n\nexport default SettingsIcon;\n","import React from 'react';\n\nconst CloseIcon: React.FC = () => {\n  return (\n    <svg\n      viewBox='0 0 26 26'\n      className='o-button--nav__icon'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <path d='M13 0C5.83203 0 0 5.83203 0 13C0 20.168 5.83203 26 13 26C20.168 26 26 20.168 26 13C26 5.83203 20.168 0 13 0ZM13 2C19.0859 2 24 6.91406 24 13C24 19.0859 19.0859 24 13 24C6.91406 24 2 19.0859 2 13C2 6.91406 6.91406 2 13 2ZM9.21875 7.78125L7.78125 9.21875L11.5625 13L7.78125 16.7812L9.21875 18.2188L13 14.4375L16.7812 18.2188L18.2188 16.7812L14.4375 13L18.2188 9.21875L16.7812 7.78125L13 11.5625L9.21875 7.78125Z' />\n    </svg>\n  );\n};\n\nexport default CloseIcon;\n","import React, { useState, useContext } from 'react';\nimport { LanguageContext } from '../../../providers/LanguageProvider';\nimport SettingsList from './SettingsList';\nimport NavButton from '../nav-buttons/NavButton';\nimport SettingsIcon from '../nav-buttons/SettingsIcon';\nimport CloseIcon from '../nav-buttons/CloseIcon';\nimport content from '../../../contents/headerContent';\n\nconst SettingsPanel: React.FC = () => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { language } = useContext(LanguageContext);\n\n  return (\n    <aside\n      className={`c-nav c-nav--settings ${\n        isExpanded ? 'c-nav--is-expanded' : ''\n      }`}\n    >\n      {isExpanded ? (\n        <NavButton\n          handleClick={() => setIsExpanded(false)}\n          label={content[language].button.close}\n        >\n          <CloseIcon />\n        </NavButton>\n      ) : (\n        <NavButton\n          handleClick={() => setIsExpanded(true)}\n          label={content[language].button.settings}\n        >\n          <SettingsIcon />\n        </NavButton>\n      )}\n      <SettingsList />\n    </aside>\n  );\n};\n\nexport default SettingsPanel;\n","import React from \"react\";\n\nconst HeaderIcon: React.FC = () => (\n  <svg className=\"c-icon--header\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M9 6V9.09375C8.36719 9.22266 7.77344 9.49609 7.25 9.84375L5.0625 7.625L3.625 9.0625L5.84375 11.25C5.49609 11.7734 5.22266 12.3672 5.09375 13H2V15H5.125C5.25391 15.6289 5.50781 16.1992 5.84375 16.7188L3.625 18.9375L4.25 19.5625C4.11328 20.0195 4 20.5 4 21C4 23.7578 6.24219 26 9 26H25C27.7578 26 30 23.7578 30 21C30 18.9805 28.7891 17.1797 26.9688 16.4062C26.6875 13.9883 24.6562 12.0977 22.1875 12C21.125 10.1523 19.1641 9 17 9C16.7734 9 16.5625 9.00781 16.3438 9.03125L14.9375 7.625L12.75 9.84375C12.2266 9.50781 11.6289 9.25391 11 9.125V6H9ZM10 11C10.7656 11 11.4453 11.2852 11.9688 11.75C11.707 12.1523 11.4727 12.5977 11.3125 13.0625C9.73047 13.332 8.46094 14.543 8.09375 16.0938C8.03906 16.1016 7.98828 16.1133 7.9375 16.125C7.37891 15.582 7 14.8477 7 14C7 12.332 8.33203 11 10 11ZM17 11C18.6055 11 20.0547 11.9609 20.6875 13.4375L20.9688 14.125L21.875 14.0312C21.918 14.0234 21.9531 14 22 14C23.6523 14 24.9961 15.3516 25 16.9375L24.9688 17.9062L25.75 18.0938C27.082 18.4336 28 19.6367 28 21C28 22.6523 26.6523 24 25 24H9C7.34766 24 6 22.6523 6 21C6 19.3477 7.34766 18 9 18H10V17C10 15.8984 10.8945 15.0039 11.9062 15L12.9062 15.0625L13.0938 14.2188C13.4688 12.3594 15.1016 11 17 11Z\" />\n  </svg>\n);\n\nexport default HeaderIcon;","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst NavItem: React.FC<{ path: string}> = ({ path }) => {\n  const currentPage = useLocation().pathname;\n  const textContent = path || 'start';\n  const isActive = currentPage.slice(1) === path;\n\n  return (\n    <li className={`c-nav__item ${isActive && 'c-nav__item--is-active'}`} id={path}>\n      <Link to={`/${path}`} >\n        {textContent.toUpperCase()}\n      </Link>\n    </li>\n  );\n};\n\nexport default NavItem;\n","import React from 'react';\nimport { INavWithLanguage } from '../../../types';\nimport NavItem from './NavItem';\nimport content from '../../../contents/headerContent';\n\nconst NavList: React.FC<INavWithLanguage> = ({ handleClick, language }) => {\n\n  return (\n    <ul className='c-nav__list c-nav__list--nav' onClick={handleClick}>\n      <NavItem path='' />\n      <NavItem path={`${content[language].path.forecasts}`} />\n      <NavItem path={`${content[language].path.about}`} />\n    </ul>\n  );\n};\n\nexport default NavList;\n","import React from 'react';\n\nconst NavIcon: React.FC = () => {\n  return (\n    <svg\n      viewBox='0 0 24 18'\n      className='o-button--nav__icon'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <path d='M0 0V2H24V0H0ZM0 8V10H24V8H0ZM0 16V18H24V16H0Z' />\n    </svg>\n  );\n};\n\nexport default NavIcon;\n","import React, { useState, useContext } from 'react';\nimport { LanguageContext } from '../../../providers/LanguageProvider';\nimport NavList from './NavList';\nimport NavButton from '../nav-buttons/NavButton';\nimport CloseIcon from '../nav-buttons/CloseIcon';\nimport NavIcon from '../nav-buttons/NavIcon';\nimport content from '../../../contents/headerContent';\n\nconst Nav: React.FC = () => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { language } = useContext(LanguageContext);\n\n  return (\n    <nav\n      className={`c-nav c-nav--main ${isExpanded ? 'c-nav--is-expanded' : ''}`}\n    >\n      {isExpanded ? (\n        <NavButton\n          handleClick={() => setIsExpanded(false)}\n          label={content[language].button.close}\n        >\n          <CloseIcon />\n        </NavButton>\n      ) : (\n        <NavButton\n          handleClick={() => setIsExpanded(true)}\n          label={content[language].button.nav}\n        >\n          <NavIcon />\n        </NavButton>\n      )}\n      <NavList handleClick={() => setIsExpanded(false)} language={language} />\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\nimport SettingsPanel from './settings-panel/SettingsPanel';\nimport HeaderIcon from './HeaderIcon';\nimport MainNav from './main-nav/Main-Nav';\n\nconst MainHeader: React.FC = () => {\n  return (\n    <header className=\"l-header\">\n      <SettingsPanel />\n      <HeaderIcon />\n      <MainNav />\n      <h1 className=\"l-header__title\">What's the Weather</h1>\n    </header>\n  );\n};\n\nexport default MainHeader;","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Spinner from '../shared/Spinner';\n\nconst HomePage = lazy(() => import('./HomePage'));\nconst ForecastsPage = lazy(() => import('./ForecastsPage'));\nconst AboutPage = lazy(() => import('./AboutPage'));\n\nconst Pages: React.FC = () => {\n  return (\n    <Suspense fallback={<Spinner message='' />}>\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/forecasts' component={ForecastsPage} />\n          <Route path='/about' component={AboutPage} />\n        </Switch>\n    </Suspense>\n  );\n};\n\nexport default Pages;\n","import React from 'react';\nimport Pages from '../pages/Pages';\n\nconst Main: React.FC = () => {\n  return (\n    <main className=\"l-main\">\n      <Pages />\n    </main>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport MainHeader from '../header/MainHeader';\nimport Main from './Main';\n\nconst Layout = () => {\n  return (\n    <>\n      <MainHeader />\n      <Main />\n    </>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { LanguageProvider } from '../providers/LanguageProvider';\nimport { ModeProvider } from '../providers/ModeProvider';\nimport { LocationProvider } from '../providers/LocationProvider';\n\nimport Layout from './layout/Layout';\n\nconst App = () => {\n  return (\n    <Router>\n      <LanguageProvider>\n        <ModeProvider>\n          <LocationProvider>\n            <Layout />\n          </LocationProvider>\n        </ModeProvider>\n      </LanguageProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { Languages, TChangeLanguage } from '../types';\n\nconst CHANGE_LANGUAGE: TChangeLanguage = 'CHANGE_LANGUAGE';\n\nexport default (\n  language: Languages,\n  action: { type: TChangeLanguage; payload: Languages }\n): Languages => {\n  switch (action.type) {\n    case CHANGE_LANGUAGE:\n      return (language = action.payload);\n    default:\n      return language;\n  }\n};\n","import React, { useReducer } from 'react';\nimport languageReducer from '../reducers/languageReducer';\nimport { Languages, ILanguageContext } from '../types';\n\nconst DEFAULT_LANGUAGE: Languages = window.navigator.language.slice(0, 2) as Languages || 'en';\n\nexport const LanguageContext = React.createContext<ILanguageContext>({language: DEFAULT_LANGUAGE});\n\nexport const LanguageProvider: React.FC<{children: React.ReactElement}> = ({ children }) => {\n  const [language, changeLanguage] = useReducer(languageReducer, DEFAULT_LANGUAGE)\n  document.querySelector('html')?.setAttribute('lang', language);\n\n  return (\n    <LanguageContext.Provider value={ {language, changeLanguage} }>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n"],"sourceRoot":""}