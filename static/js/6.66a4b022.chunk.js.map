{"version":3,"sources":["components/shared/Header.tsx","components/location/locationDisplayContent.ts","components/location/LocationDisplay.tsx","components/location/locationInputContent.ts","components/location/LocationInput.tsx","components/location/WarningDisplay.tsx","components/location/decodeLocation.ts","components/location/Location.tsx","components/shared/ErrorDisplay.tsx","components/current-weather/currentWeatherDisplayContent.ts","components/current-weather/windDirection.ts","components/current-weather/CurrentWeatherDetails.tsx","components/current-weather/currentWeatherContent.ts","components/current-weather/CurrentWeather.tsx","components/pages/HomePage.tsx"],"names":["Header","title","spinnerMessage","LocationDisplay","location","useContext","LanguageContext","language","content","className","Spinner","message","label","buttonText","LocationInput","onLocationSearch","locationInputRef","useRef","onSubmit","event","preventDefault","current","value","htmlFor","type","id","ref","WarningDisplay","warning","lat","long","axios","post","then","response","data","Location","dispatch","useState","setWarning","geolocationSupported","navigator","geolocation","useEffect","position","a","coords","latitude","toString","longitude","decodeLocation","payload","getCurrentPosition","error","ErrorDisplay","rain","snow","moreDetails","lessDetails","feelsLike","pressure","humidity","visibility","wind","clouds","windDirection","degs","CurrentWeatherDetails","weather","extendedView","setExtendedView","name","toUpperCase","src","icon","alt","description","main","temp","toFixed","onClick","feels_like","temp_min","temp_max","deg","speed","all","errorMessage","spinnerMessageNoLocation","spinnerMessageNoWeather","CurrentWeather","setWeather","setError","catch","e","LocationContext"],"mappings":"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","file":"static/js/6.66a4b022.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header: React.FC<{ title: string}> = ({ title }) => (\n  <header>\n    <h1>{ title }</h1>\n  </header>\n);\n\nexport default Header;","export default [\n  {\n    title: 'location',\n    spinnerMessage: 'Waiting for your location...'\n  },\n  {\n    title: 'lokalizacja',\n    spinnerMessage: 'Czekam na lokalizację...'\n  }\n];\n","import React, { useContext } from 'react';\nimport Spinner from '../shared/Spinner';\nimport content from './locationDisplayContent';\nimport { LanguageContext } from '../language/LanguageProvider';\n\nconst LocationDisplay: React.FC<{ location: string }> = ({ location }) => {\n  const {language} = useContext(LanguageContext);\n  const { title, spinnerMessage } = language === 'en' ? content[0] : content[1];\n\n  return (\n    <div className=\"LocationDisplay\">\n      {location ? (\n        <h2>\n          {title}: <span>{location}</span>\n        </h2>\n      ) : (\n        <Spinner message={spinnerMessage} />\n      )}\n    </div>\n  );\n};\n\nexport default LocationDisplay;\n","export default [\n  {\n    label: 'enter location: ',\n    buttonText: 'search'\n  },\n  {\n    label: 'wpisz lokalizację ',\n    buttonText: 'szukaj'\n  }\n];","import React, { useRef, useContext } from 'react';\nimport content from './locationInputContent';\nimport { LanguageContext } from '../language/LanguageProvider';\n\n\ninterface ILocationInputProps {\n  onLocationSearch: (location: string) => void;\n}\n\nconst LocationInput: React.FC<ILocationInputProps> = ({onLocationSearch}) => {\n  const locationInputRef = useRef<HTMLInputElement>(null);\n  const {language} = useContext(LanguageContext);\n  const {label, buttonText} = language === 'en' ? content[0]: content[1];\n\n  const searchLocation = (event: React.FormEvent) => {\n    event.preventDefault();\n    const location = locationInputRef.current!.value;\n    onLocationSearch(location);\n  }\n\n  return (\n    <form className=\"InputForm\" onSubmit={searchLocation}>\n      <label className=\"InputForm_label\" htmlFor=\"locationInput\">\n        {label}\n      </label>\n      <input className=\"InputForm_input\" type=\"text\" id=\"locationInput\" ref={locationInputRef} />\n      <button className=\"InputForm_button\" type=\"submit\">{buttonText}</button>\n    </form>\n  )\n};\n\nexport default LocationInput;","import React from 'react';\n\ninterface IWarningDisplayProps { warning: string }\n\nconst WarningDisplay: React.FC<IWarningDisplayProps> = ({warning}) => (\n  <p className=\"Location_warning\">\n    {warning}\n  </p>\n);\n\nexport default WarningDisplay;","import axios from 'axios';\n\nconst API_URL = 'https://wtw-api.herokuapp.com/location';\n\nexport default (lat: string, long: string): Promise<string> => {\n  return axios.post(API_URL, { lat, long }).then(response => {\n    return response.data as string;\n  });\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport { LanguageContext } from '../language/LanguageProvider';\nimport LocationDisplay from './LocationDisplay';\nimport LocationInput from './LocationInput';\nimport WarningDisplay from './WarningDisplay';\nimport decodeLocation from './decodeLocation';\n\ntype GeolocationResponse = { coords: { latitude: number; longitude: number } };\n\ninterface ILocationProps {\n  location: string;\n  dispatch: Function | null;\n}\n\nconst Location: React.FC<ILocationProps> = ({ location, dispatch }) => {\n  const [warning, setWarning] = useState('');\n  const geolocationSupported = navigator && navigator.geolocation;\n  const {language} = useContext(LanguageContext);\n\n  useEffect(() => {\n    if (geolocationSupported && !location) {\n      navigator.geolocation.getCurrentPosition(success, error => {\n        if (error) {\n          setWarning(\n            language === 'en'\n              ? 'Please allow access to your location or provide desired location manually.'\n              : 'Zezwól na dostęp do usługi lokalizacji lub wpisz lokalizację ręcznie.'\n          );\n        }\n      });\n    }\n    async function success(position: GeolocationResponse) {\n      const lat = position.coords.latitude.toString();\n      const long = position.coords.longitude.toString();\n      const location = (await decodeLocation(lat, long)) as string;\n      dispatch && dispatch({ type: 'SET_LOCATION', payload: location });\n    }\n  });\n\n  useEffect(() => {\n    if (!location && !geolocationSupported) {\n      setWarning(\n        language === 'en'\n          ? 'Geolocation is not supported by your browser. Please provide desired location manually.'\n          : 'Geolokacja nie jest obsługiwana przez Twoją przeglądarkę. Wpisz lokalizację ręcznie.'\n      );\n    }\n  }, [location, geolocationSupported, language]);\n\n  function handleLocationSearch(location: string) {\n    dispatch && dispatch({ type: 'SET_LOCATION', payload: location });\n  }\n\n  return (\n    <section className=\"Location\">\n      <LocationDisplay location={location} />\n      {warning && <WarningDisplay warning={warning} />}\n      <LocationInput onLocationSearch={handleLocationSearch} />\n    </section>\n  );\n};\n\nexport default Location;\n","import React from 'react';\n\nconst ErrorDisplay: React.FC<{message: string}> = ({message}) => {\n  return (\n    <h2>\n      { message }\n    </h2>\n  );\n};\n\n\nexport default ErrorDisplay;","export default [\n  {\n    rain: 'rain',\n    snow: 'snow',\n    moreDetails: 'see more details',\n    lessDetails: 'hide details',\n    feelsLike: 'feels like',\n    pressure: 'pressure',\n    humidity: 'humidity',\n    visibility: 'visibility',\n    wind: 'wind',\n    clouds: 'clouds'\n  },\n  {\n    rain: 'deszcz',\n    snow: 'śnieg',\n    moreDetails: 'więcej informacji',\n    lessDetails: 'mniej informacji',\n    feelsLike: 'odczuwalne',\n    pressure: 'ciśnienie',\n    humidity: 'wilgotność',\n    visibility: 'widoczność',\n    wind: 'wiatr',\n    clouds: 'zachmurzenie'\n  }\n];\n","const windDirection = (degs: number): string => {\n  if (degs >= 350 && degs < 10) return 'N';\n  if (degs >= 10 && degs < 80) return 'NE';\n  if (degs >= 80 && degs < 100) return 'E';\n  if (degs >= 100 && degs < 170) return 'SE';\n  if (degs >= 180 && degs < 190) return 'S';\n  if (degs >= 190 && degs < 260) return 'SW';\n  if (degs >= 260 && degs < 280) return 'W';\n  return 'NW';\n};\n\nexport default windDirection;\n","import React, { useState } from 'react';\nimport { ICurrentWeather } from './currentWeather.model';\nimport content from './currentWeatherDisplayContent';\nimport windDirection from './windDirection';\n\ninterface ICurrentWeatherDetails {\n  title: string;\n  weather: ICurrentWeather;\n  language: string;\n}\n\nconst CurrentWeatherDetails: React.FC<ICurrentWeatherDetails> = ({\n  title,\n  weather,\n  language\n}) => {\n  const [extendedView, setExtendedView] = useState<boolean>(false);\n\n  const {\n    rain,\n    snow,\n    moreDetails,\n    lessDetails,\n    feelsLike,\n    pressure,\n    humidity,\n    visibility,\n    wind,\n    clouds\n  } = language === 'en' ? content[0] : content[1];\n\n  return (\n    <section className=\"CurrentWeatherDetails\">\n      <h2>\n        {title}\n        <span>{weather.name.toUpperCase()}</span>\n      </h2>\n\n      <div className=\"CurrentWeatherDetails_basic\">\n        <div className=\"CurrentWeatherDetails_icon\">\n          <img\n            src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n            alt=\"\"\n          />\n        </div>\n\n        <div className=\"CurrentWeatherDetails_details\">\n          <p className=\"CurrentWeatherDetails_desc\">\n            {weather.weather[0].description.toUpperCase()}\n          </p>\n          <p className=\"CurrentWeatherDetails_temp\">\n            {weather.main.temp.toFixed(1)}°C\n          </p>\n          <button\n            onClick={() => {\n              setExtendedView(!extendedView);\n            }}\n          >\n            {extendedView ? lessDetails : moreDetails}\n          </button>\n        </div>\n      </div>\n\n      {extendedView && (\n        <ul className=\"CurrentWeatherDetails_extended\">\n          <li>\n            {feelsLike}: {weather.main.feels_like.toFixed(1)}°C\n          </li>\n          <li>\n            {weather.main.temp_min && (\n              <span>min: {weather.main.temp_min.toFixed(1)}°C</span>\n            )}\n            {weather.main.temp_max && (\n              <span> max: {weather.main.temp_max.toFixed(1)}°C</span>\n            )}\n          </li>\n          {weather.rain && (\n            <li>\n              {rain}: {weather.rain['1h']}mm\n            </li>\n          )}\n          {weather.snow && (\n            <li>\n              {snow}: {weather.snow['1h']}mm\n            </li>\n          )}\n          {weather.main.pressure && (\n            <li>\n              {pressure}: {weather.main.pressure}hPa\n            </li>\n          )}\n          {weather.main.humidity && (\n            <li>\n              {humidity}: {weather.main.humidity}%\n            </li>\n          )}\n          {weather.visibility && (\n            <li>\n              {visibility}: {weather.visibility}m\n            </li>\n          )}\n          {weather.wind && weather.wind.deg && (\n            <li>\n              {wind}: {weather.wind.speed}m/s {windDirection(weather.wind.deg)}\n            </li>\n          )}\n          {weather.clouds && (\n            <li>\n              {clouds}: {weather.clouds.all}%\n            </li>\n          )}\n        </ul>\n      )}\n    </section>\n  );\n};\n\nexport default CurrentWeatherDetails;\n","export default [\n  {\n    title: 'current weather in: ',\n    errorMessage: 'Weather not available',\n    spinnerMessageNoLocation: 'Waiting for location...',\n    spinnerMessageNoWeather: 'Checking weather in ',\n  },\n  {\n    title: 'aktualna pogoda w: ',\n    errorMessage: 'Informacje niedostępne',\n    spinnerMessageNoLocation: 'Czekam na lokalizację...',\n    spinnerMessageNoWeather: 'Sprawdzam pogodę w '\n  }\n];\n","import React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { ICurrentWeather } from './currentWeather.model';\nimport Spinner from '../shared/Spinner';\nimport ErrorDisplay from '../shared/ErrorDisplay';\nimport CurrentWeatherDetails from './CurrentWeatherDetails';\nimport { LanguageContext } from '../language/LanguageProvider';\nimport content from './currentWeatherContent';\n\nconst API_URL = 'https://wtw-api.herokuapp.com/weather/current';\n\ninterface ILocation {\n  location: string;\n}\n\nconst CurrentWeather: React.FC<ILocation> = ({ location }) => {\n  const [weather, setWeather] = useState<ICurrentWeather>();\n  const [error, setError] = useState<boolean>(false);\n  const {language} = useContext(LanguageContext);\n\n  const {title, errorMessage, spinnerMessageNoLocation, spinnerMessageNoWeather } = language === 'en' ? content[0]: content[1];\n\n  useEffect(() => {\n\n    if (location) {\n      axios\n        .post(API_URL, {location, language})\n        .then(response => response.data)\n        .then((data: ICurrentWeather) => {\n          setError(false);\n          setWeather(data)\n        })\n        .catch(e => {\n          setError(true)\n        });\n    }\n  }, [location, language, error]);\n\n  if (error) return <ErrorDisplay message={errorMessage} />;\n\n  if (!location) return <Spinner message={spinnerMessageNoLocation} />;\n\n  if (location && !weather) return <Spinner message={`${spinnerMessageNoWeather}${location}...`} />;\n\n  if (location && weather) return <CurrentWeatherDetails title={title} weather={weather} language={language}/>;\n\n  return <ErrorDisplay message={errorMessage} />;\n};\n\nexport default CurrentWeather;\n","import React, { useContext } from 'react';\nimport { LocationContext } from '../location/LocationProvider';\n\nimport Header from '../shared/Header';\nimport Location from '../location/Location';\nimport CurrentWeather from '../current-weather/CurrentWeather';\n\nexport default () => {\n  const { location, dispatch } = useContext(LocationContext);\n\n  return (\n    <>\n      <Header title=\"What's the Weather\" />\n      <Location location={location} dispatch={dispatch} />\n      <CurrentWeather location={location} />\n    </>\n  );\n};\n"],"sourceRoot":""}